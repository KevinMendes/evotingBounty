/*
 * (c) Original Developers indicated in attribution.txt, 2022. All Rights Reserved.
 */

/* jshint node:true */
'use strict';

const elGamal = require('../../../src/elgamal');
const mathematical = require('../../../src/mathematical');
const forge = require('node-forge');
const cryptoPolicy = require('../../../src/cryptopolicy');

module.exports = CommonTestData;

const BigInteger = forge.jsbn.BigInteger;

const NUM_GROUP_ELEMENTS = 2;
const P_STR = '18388150860058403802920178412529336901045699792821062607508310191219067488929344819011655681691429908099537898007051346381319540197913' +
	'9859203647659085471016920713495528166363693675446161613934552485057155482567306193272596584186000158109106046352639037376165933064299110722219' +
	'4099935594482476175383869987955168985814863206910604761983038024345803144240965961120000788895995343754304465559705608854777189131264826250622' +
	'7920704399229781324390822268662093433904228476979779245119127884271965731790161943746483421514488899439030602938576698046317134953671828836992' +
	'240482213650086228584024738151779796555132971162736548421';
const Q_STR = '109188178987346060540931492760016322087867834859560658858348863050652467381219';
const G_STR = '64315942550503136727981620414161451551235371761622064645996731542026880278205502893376821127325878287867087600488108608174175740134352' +
	'2632440811523808637204698240464370595766369624228246094791988729125222453918573776737735985768664998564576263067086207133483775488562203819523' +
	'2217444313694852522479206669610421474444346400342471527071738523665348936494890059311136916656053115112260529618114987507430695124467855162053' +
	'7555711772724435465216769559244231082935608963969604150969568180801274619806459252465580241072439295435401728321355412502207080111934428493082' +
	'85218922194166541952394599374171304353189155270026540947';

const KEY_EXPONENT_1_VALUE_STR = '68379038900637051517929857043396627159524942841517755089254237132167541867842';
const KEY_EXPONENT_2_VALUE_STR = '97029418700179232960780546578551913071897870306385395803266262100579700109881';

const P_LARGE_STR = '22588801568735561413035633152679913053449200833478689904902877673687016391844561133376032309307885537704777240609087377993341380' +
	'7516976052355411312738684400709203621484318668297877844450191479993794985036932474295794802892266027483973353278908844646850516827037097427241' +
	'2178321782704072241536010317928916005658175937247584598543897730732357053075336202714538412477182611465171026476643727304475969095505198283968' +
	'4910462609395741692689616014805965573558015387956017183286848440036954926101719205598449898400180082053755864070690174202432196678045052744337' +
	'832802051787273056312757384654145455745603262082348042780103679';
const Q_LARGE_STR = '11294400784367780706517816576339956526724600416739344952451438836843508195922280566688016154653942768852388620304543688996670690' +
	'3758488026177705656369342200354601810742159334148938922225095739996897492518466237147897401446133013741986676639454422323425258413518548713620' +
	'6089160891352036120768005158964458002829087968623792299271948865366178526537668101357269206238591305732585513238321863652237984547752599141984' +
	'2455231304697870846344808007402982786779007693978008591643424220018477463050859602799224949200090041026877932035345087101216098339022526372168' +
	'916401025893636528156378692327072727872801631041174021390051839';

const KEY_EXPONENT_1_LARGE_VALUE_STR = '5246195210525433809991041832497500420159820502611922642940594499141336290822436187204306951878394812419367396' +
	'8702886959975964996326378305655546882565111753230803069530202284669707170877127120959862568460534617048959477602369911294178626114927928022059' +
	'8958460324584294946084974584688905975997251217471168093893503082818854773946625150702742678211399798148706312886828262419013280628208871949747' +
	'0116612846257985325063934014036332157021951620977724180154700796454307668822217381945535502098030621793703965238911963021713929460908714295226' +
	'392914329713320481974582030903807983051516340305356363705307675208448710968910281';
const KEY_EXPONENT_2_LARGE_VALUE_STR = '6217830292449137912442681116256872859548577845796124096346308302486784713606511013510921690485062872494403744' +
	'4680015069483182133744234021647454163804342841602083233491885857202150665844613080866345288989368622110461121404406545567802412720906788293704' +
	'7088949310307493796623838827613876350829591581777945620588016845852330294144189864821052111767837217657053273874677832245023478151258184888723' +
	'1094958009745386789647429837654456159563537678760039640284263420416349623609340765899018438834432932191721559272684472356094055314376404579914' +
	'705151171906397740417398220907146365470603508856967989388013687983762445746354133';


/**
 * Provides the common data needed by the ElGamal service unit tests.
 */
function CommonTestData() {
	const policy = cryptoPolicy.newInstance();
	policy.mathematical.groups.type =
		cryptoPolicy.options.mathematical.groups.type.ZP_2048_256;

	let _mathService = mathematical.newService({policy: policy});
	let elGamalService = elGamal.newService({policy: policy});

	const _mathRandomGenerator = _mathService.newRandomGenerator();

	let p = new BigInteger(P_STR);
	let q = new BigInteger(Q_STR);
	let g = new BigInteger(G_STR);
	const _group = _mathService.newZpSubgroup(p, q, g);

	const _privateKeyExponents = [];
	_privateKeyExponents[0] = _mathService.newExponent(q, new BigInteger(KEY_EXPONENT_1_VALUE_STR));
	_privateKeyExponents[1] = _mathService.newExponent(q, new BigInteger(KEY_EXPONENT_2_VALUE_STR));
	const _privateKey = elGamalService.newPrivateKey(_group, _privateKeyExponents);

	p = new BigInteger(P_LARGE_STR);
	q = new BigInteger(Q_LARGE_STR);
	g = new BigInteger(G_STR);
	/* Get a new service with the default policy to be able to test
	QR_2048 group type */
	_mathService = mathematical.newService();
	const _largeGroup = _mathService.newZpSubgroup(p, q, g);

	/* Get a new service with the default policy to be able to test
	QR_2048 group type */
	elGamalService = elGamal.newService();

	const _largePrivateKeyExponents = [];
	_largePrivateKeyExponents[0] = _mathService.newExponent(q, new BigInteger(KEY_EXPONENT_1_LARGE_VALUE_STR));
	_largePrivateKeyExponents[1] = _mathService.newExponent(q, new BigInteger(KEY_EXPONENT_2_LARGE_VALUE_STR));
	const _largePrivateKey = elGamalService.newPrivateKey(_largeGroup, _largePrivateKeyExponents);

	const _exponentsFromLargeGroup = generateRandomExponents(_largeGroup, NUM_GROUP_ELEMENTS);

	this.getGroup = function () {
		return _group;
	};

	this.getLargeGroup = function () {
		return _largeGroup;
	};

	this.getPrivateKey = function () {
		return _privateKey;
	};

	this.getPrivateKeyExponents = function () {
		return _privateKeyExponents;
	};

	this.getLargePrivateKey = function () {
		return _largePrivateKey;
	};


	this.getExponentsFromLargeZpSubgroup = function () {
		return _exponentsFromLargeGroup;
	};

	function generateRandomExponents(group, numExponents) {
		const exponents = [];
		for (let i = 0; i < numExponents; i++) {
			exponents.push(_mathRandomGenerator.nextExponent(group));
		}

		return exponents;
	}
}
